!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.JSExec=t():e.JSExec=t()}(this,()=>{return e={44:function(e,t){var n,o,r,s;function i(e){console.log("=== DEBUG: JSExec function constructor called ==="),console.log("Options:",e),e=e||{};try{console.log("=== DEBUG: Setting up properties ==="),this.iframe=null,this.iframeOrigin=e.iframeOrigin||window.location.origin,this.listeners=new Set,this.isReady=!1,this.pendingPrompts=new Map,console.log("=== DEBUG: Properties set, about to setup message listener ==="),this.setupMessageListener(),console.log("=== DEBUG: Constructor completed successfully ===")}catch(e){throw console.error("=== DEBUG: Error in JSExec constructor ==="),console.error("Constructor error:",e),e}}console.log("js-exec script loaded!"),i.prototype.executeCode=function(e){if(this.iframe||this.createIframe(),!this.isReady)return setTimeout(()=>this.executeCode(e),100);this.iframe.contentWindow.postMessage({type:"EXECUTE_CODE",code:e},"*")},i.prototype.createIframe=function(){this.iframe=document.createElement("iframe"),this.iframe.sandbox="allow-scripts allow-forms",this.iframe.style.display="none",this.iframe.srcdoc=this.getIframeContent(),document.body.appendChild(this.iframe),this.iframe.onload=()=>{this.isReady=!0}},i.prototype.getIframeContent=function(){return`\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset="UTF-8">\n      <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'unsafe-inline' 'unsafe-eval'; connect-src 'none';">\n    </head>\n    <body>\n      <script>${this.getExecutorScript()}<\/script>\n    </body>\n    </html>\n  `},i.prototype.getExecutorScript=function(){return"\n    let promptCounter = 0;\n    const pendingPrompts = new Map();\n\n    const originalLog = console.log;\n    const originalError = console.error;\n    const originalWarn = console.warn;\n    const originalPrompt = window.prompt;\n\n    console.log = (...args) => {\n      window.parent.postMessage({ type: 'stdout', data: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ') }, '*');\n      originalLog.apply(console, args);\n    };\n\n    console.error = (...args) => {\n      window.parent.postMessage({ type: 'stderr', data: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ') }, '*');\n      originalError.apply(console, args);\n    };\n\n    console.warn = (...args) => {\n      window.parent.postMessage({ type: 'stderr', data: '[WARN] ' + args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg)).join(' ') }, '*');\n      originalWarn.apply(console, args);\n    };\n\n    // Override prompt to use postMessage communication\n    window.prompt = function(message, defaultValue) {\n      const promptId = ++promptCounter;\n      \n      return new Promise((resolve) => {\n        pendingPrompts.set(promptId, resolve);\n        \n        // Send awaiting-input message to parent\n        window.parent.postMessage({\n          type: 'awaiting-input',\n          promptId: promptId,\n          message: message || '',\n          defaultValue: defaultValue || ''\n        }, '*');\n      });\n    };\n\n    function executeCode(code) {\n      try {\n        // Use async function to handle potential promises from prompt\n        (async function() {\n          try {\n            await eval(`(async function() { ${code} })()`);\n          } catch (error) {\n            window.parent.postMessage({ type: 'stderr', data: error.message + (error.stack ? '\\n' + error.stack : '') }, '*');\n          }\n        })();\n      } catch (error) {\n        window.parent.postMessage({ type: 'stderr', data: error.message + (error.stack ? '\\n' + error.stack : '') }, '*');\n      }\n    }\n\n    window.addEventListener('message', (event) => {\n      if (event.data.type === 'EXECUTE_CODE') {\n        executeCode(event.data.code);\n      } else if (event.data.type === 'stdin') {\n        // Handle stdin response from parent\n        const { promptId, value } = event.data;\n        const resolve = pendingPrompts.get(promptId);\n        if (resolve) {\n          pendingPrompts.delete(promptId);\n          resolve(value);\n        }\n      }\n    });\n  "},i.prototype.setupMessageListener=function(){window.addEventListener("message",e=>{e.source===this.iframe?.contentWindow&&("awaiting-input"===e.data.type?this.handlePromptRequest(e.data):this.listeners.forEach(t=>t(e.data)))})},i.prototype.handlePromptRequest=function(e){const{promptId:t,message:n,defaultValue:o}=e;this.listeners.forEach(e=>e({type:"awaiting-input",promptId:t,message:n,defaultValue:o}))},i.prototype.sendStdinResponse=function(e,t){this.iframe&&this.isReady&&this.iframe.contentWindow.postMessage({type:"stdin",promptId:e,value:t},"*")},i.prototype.onMessage=function(e){return this.listeners.add(e),()=>this.listeners.delete(e)},i.prototype.destroy=function(){this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null,this.isReady=!1),this.listeners.clear(),this.pendingPrompts.clear()},"undefined"!=typeof self&&self,s=function(){return i},e.exports?e.exports=s():(o=[],void 0===(r="function"==typeof(n=s)?n.apply(t,o):n)||(e.exports=r))}},t={},function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o].call(s.exports,s,s.exports,n),s.exports}(44);var e,t});